plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.9.4'

    testImplementation 'foundation.icon:javaee-unittest:0.11.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

compileJava {
    // need to add this option to retrieve formal parameter names
    options.compilerArgs += ['-parameters']
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

def projectName = 'javaee-tokens'
def repoUrl = 'https://github.com/sink772/javaee-tokens'
def snapshotSuffix = rootProject.hasProperty('release') ? '' : '-SNAPSHOT'
version = VERSION + snapshotSuffix

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "sink772"
            name "Jaechang Namgoong"
            email "sink772@gmail.com"
        }
    }
    scm {
        url repoUrl
    }
}

publishing {
    repositories {
        maven {
            name = 'mavenCentral'
            def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
            credentials {
                username = rootProject.hasProperty('ossrhUsername') ? "$ossrhUsername" : ''
                password = rootProject.hasProperty('ossrhPassword') ? "$ossrhPassword" : ''
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = GROUP
            artifactId = projectName
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('name', projectName)
                root.appendNode('description', 'A Java SCORE Library for ICON Standard Tokens')
                root.appendNode('url', repoUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

signing {
    required rootProject.hasProperty('release')
    if (rootProject.hasProperty('signingKey')) {
        def signingKey = rootProject.findProperty("signingKey")
        def signingPassword = rootProject.findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenJava
}
